rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuth() &&
             exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }

    function isMe(userId) {
      return isAuth() &&
             request.auth.token.email == userId;
    }

    function isApprover() {
      return isAuth() &&
             request.auth.token.email == resource.data.common.current_approver_email;
    }

    function isRemand(userId) {
      return isMe(userId) &&
             resource.data.status == '差戻し';
    }

    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }
    match /departments/{departmentId} {
      allow read, write: if isAdmin();
    }

    match /users/{userId} {
      // ユーザー一覧の読み取り・作成を、本人と管理者のみ許可する
      allow read, create: if isMe(userId) || isAdmin();
      // ユーザー一覧の更新・削除を管理者のみ許可する
      allow update, delete: if isAdmin();

      match /requests/{requestId}/{doc=**} {
        // 申請の読み取りを、本人または承認者として指定されたユーザーのみ許可する
        allow read: if isMe(userId) || isApprover();
        // 申請の作成を、本人のみ許可する
        allow create: if isMe(userId);
        // 申請の更新を、承認者として指定されたユーザーまたは、本人(ステータス=差戻し)のみ許可する
        allow update: if isApprover() || isRemand(userId);
      }
    }

    // 他ユーザーからの承認依頼に対するルールを定義 一覧画面・詳細画面
    match /{path=**}/requests/{requestId} {
      allow list: if isApprover();
    }
    match /{path=**}/details/{detailId} {
      allow list: if isApprover();
    }

    // ユーザーが所属する部署から申請ルート情報を取得するために使用
    match /routes/{routeId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
  }
}
